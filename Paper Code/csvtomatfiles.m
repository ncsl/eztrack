%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/adam2392/Documents/eztrack/output/heatmap/avg ref/pt1sz2_iEEG_temporal_results_16-Sep-2017.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/09/17 18:35:38
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       ex: computeDoaGroup(patients, 250, 125, 'notchfilter', 'fourier',
%       1.5);
%
%-----------------------------------------------------------------------------------------
%
% Description:  For eztrack computation output, create mat files from the
% csv file heatmaps created. 
%
%-----------------------------------------------------------------------------------------
%   
%   Input:  
%   1. 
% 
%   Output: 
%   1.                       
%-----------------------------------------------------------------------------------------
% Author: Adam Li
%
% Ver.: 1.0 - Date: 09/17/2017
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
patients = {,...
%     'pt1sz2', 'pt1sz3', 'pt1sz4',...
%     'pt2sz1' 'pt2sz3' 'pt2sz4', ...
%     'pt3sz2' 'pt3sz4', ...
%     'pt8sz1' 'pt8sz2','pt8sz3',...
%     'pt10sz1', 'pt10sz2' 'pt10sz3', ...
%     'pt12sz1', 'pt12sz2', ...
%     'pt13sz1', 'pt13sz2', 'pt13sz3', 'pt13sz5',...
%     'UMMC001_sz1', 'UMMC001_sz2', 'UMMC001_sz3', ...
%     'UMMC002_sz1', 'UMMC002_sz2', 'UMMC002_sz3', ...
%     'UMMC003_sz1', 'UMMC003_sz2', 'UMMC003_sz3', ...
%     'UMMC004_sz1', 'UMMC004_sz2', 'UMMC004_sz3', ...
%     'UMMC005_sz2', 'UMMC005_sz3', ...
%     'UMMC006_sz1', 'UMMC006_sz2', 'UMMC006_sz3', ...
%     'UMMC007_sz1', 'UMMC007_sz2', 'UMMC007_sz3', ...
    'EZT007_seiz001', 'EZT007_seiz002', 'EZT007_seiz003',...
    'EZT019_seiz001', 'EZT019_seiz002', ...
    'EZT090_seiz002', 'EZT090_seiz003',...
    'EZT091_seiz001', 'EZT091_seiz002', 'EZT091_seiz003',...
    'EZT092_seiz001', 'EZT092_seiz002', 'EZT092_seiz003',...
    'EZT120_seiz001', 'EZT120_seiz002', 'EZT120_seiz003',...
    'EZT121_seiz001', 'EZT121_seiz002', 'EZT121_seiz003',...
    'EZT127_seiz001', 'EZT127_seiz002',...
};

ids = {1, 2, 3, ...
       1, 2, ...
       1, 2, ...
       1, 2, 3, ...
       1, 2, 3, ...
       1, 2, 3, ...
       1, 2, 3, ...
       1, 2, ...
   };

% read_labels_NIH;
% results_file = 'nih_ieeg_results.mat';

% read_labels_UMMC;
% results_file = 'ummc_ieeg_results.mat';
% center = 'ummc';

read_labels_cleveland;
results_file = 'cc_ieeg_results.mat';
center = 'cc';

results_struct = struct();
for iPat=1:length(patients)
    patient = patients{iPat};
    
    %% Initialize variables
    filename = strcat('/Users/adam2392/Documents/eztrack/output/heatmap/avg ref/', center, '/', patient, '*'); %'_iEEG_temporal_results_*.csv');
    file = dir(filename);
    file = file.name;
    filename = fullfile('/Users/adam2392/Documents/eztrack/output/heatmap/avg ref/', center, '/', file);
    delimiter = ',';
    startRow = 2;

    %% Format for each line of text:
    %   column1: text (%s)
    %	column2: text (%s)
    %   column3: double (%f)
    %	column4: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%s%f%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

    %% Close the text file.
    fclose(fileID);

    %% Allocate imported array to column variable names
    patient_id1 = dataArray{:, 1};
    label = dataArray{:, 2};
    weight = dataArray{:, 3};
    heatmap_color = dataArray{:, 4};
    
    [pat, patient, seiz_id, isseeg] = splitPatient(patient);
    
    [included_channels, onset_electrodes, ...
    earlyspread_labels, latespread_labels, ...
    resection_labels, frequency_sampling, center, success_or_failure] ...
                = determineClinicalAnnotations(patient, seiz_id);
    if success_or_failure
        outcome = 'SUCCESS';
    else
        outcome = 'FAILURE';
    end
    
    % create field name for the patient's seizure
    id = ids{iPat};
    current_gauss = strcat('E_gauss', num2str(id));
    
    % get the labels for this patient
    subjects = {labels.subject};
    pat_ind = find(strcmp(subjects, patient));
%     onset = labels(pat_ind).onset;
     onset = labels(pat_ind).focus;
%     resection = labels(pat_ind).resection;
    
    % create the resulting structure
    if ~isfield(results_struct, patient)
        results_struct.(patient) = struct();
    end
    results_struct.(patient).onset = onset;
%     results_struct.(patient).resection = resection;
    results_struct.(patient).labels = label;
    results_struct.(patient).seiz.(current_gauss) = weight;
    results_struct.(patient).outcome = outcome;
end

fprintf('Done!\n');

% average out seizure results into an average
patients = fieldnames(results_struct);
for iPat=1:length(patients),
    patient = patients{iPat};
    seiz_results = fieldnames(results_struct.(patient).seiz);
    e_gauss = 0;
    for iSeiz=1:length(seiz_results)
        e_gauss = e_gauss + results_struct.(patient).seiz.(seiz_results{iSeiz});
    end
    e_gauss = e_gauss / length(seiz_results);
    
    results_struct.(patient).seiz.E_weights = e_gauss;
end

save(results_file, '-struct', 'results_struct')