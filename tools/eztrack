#!/usr/bin/env bash

set -e

PROJECT_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

mef_path=$PROJECT_HOME/../mef_lib_2_1

matlab_exe="/Applications/MATLAB_R2014b.app/bin/matlab"
matlab_jvm="$matlab_exe -nodesktop -nosplash -r"

heatmap_output=$PROJECT_HOME/output/heatmap
temporal_out=/tmp/eztrack-temporal
reference=$PROJECT_HOME/data/reference

patient_id=$1
[[ ! -z "$patient_id" ]] || { echo "Usage: ./eztrack <patient_id (e.g. PY12N008)>" ; exit 1 ; }

[[ ! -z "`which $matlab_exe`" ]] || \
    { echo "MATLAB not found at $matlab_exe; please check the Getting Started section in the README" ; exit 1 ; }

[[ -d $reference ]] || \
    { echo "EZTrack reference data not found at $reference; please check the Getting Started section in the README" ; exit 1 ; }

printf "\n== Validating $patient_id.csv  ==\n"
# "TODO: input validation: Map patient_id to $patient_id.csv saved to $PROJECT_HOME"

printf "\n== Finding MEF files for $patient_id  ==\n"
# "TODO: mef_finder"

printf "\n== Copying MEF files to local storage  ==\n"
# "TODO: mef_copy"

printf "\n== mef2eeg ==\n"

printf "\n== mef2ascii ==\n"
rm -f $PROJECT_HOME/data/mef/$patient_id/*.txt
ls $PROJECT_HOME/data/mef/$patient_id/*.mef | xargs -n 1 -P 8 mef2ascii
# TODO: Extract mef headers here for use in time and channel filters

printf "\n== downsample ==\n"
ls $PROJECT_HOME/data/mef/$patient_id/*.txt | xargs -n 1 -P 8 mef2eeg/downsample

printf "\n== time_filter ==\n"
# TODO: Take the writeup about date conversion logic from the Trello card and move it to the very first step.
ls $PROJECT_HOME/data/mef/$patient_id/*downsample.txt | xargs -I% -n 1 -P 8 mef2eeg/time_filter % 452001 300000

printf "\n== channel_stats ==\n"
stats_file=$PROJECT_HOME/data/mef/$patient_id/channel_stats.csv
# Compute statistics for all channels
ls $PROJECT_HOME/data/mef/$patient_id/*.mef | xargs -n 1 -P 8 mef2eeg/channel_stats
# Write the channel stats header by grabbing the first line of the first channel stat file
ls $PROJECT_HOME/data/mef/$patient_id/*stats.csv | head -n 1 | xargs head -n 1 > $stats_file
# Merge all channel stats into one CSV for analysis
ls $PROJECT_HOME/data/mef/$patient_id/*stats.csv | xargs -n 1 tail -n 1 >> $stats_file
printf "\nstats_file saved to: $stats_file\n"

printf "\n== channel_filter  ==\n"
# TODO: channel_filter will output a list of files to be used in the analysis.
#       For now, just use a hard-coded filter of the LPT files.
mv $PROJECT_HOME/data/mef/$patient_id/*LPT*downsample_window.txt $PROJECT_HOME/data/mef/$patient_id/channels/
# TODO: channel_filter will also output the csv list of labels to use in the analysis, i.e. labels.csv
#       For now, simply copy a static file.
mkdir -p $PROJECT_HOME/output/eeg/$patient_id
cp $PROJECT_HOME/data/reference/PY15N012_077_labels.csv $PROJECT_HOME/output/eeg/$patient_id

printf "\n== signals2eeg ==\n"
# TODO: Remove the hard-coded 077 from the file name. Extract the time-slice id from the original file in the signals2eeg script.
paste -d ',' $PROJECT_HOME/data/mef/$patient_id/channels/*.txt > $PROJECT_HOME/data/mef/$patient_id/channels/${patient_id}_077_eeg.csv

printf "\n== eeg2fsv ==\n"
num_channels=`ls $PROJECT_HOME/data/mef/$patient_id/channels/*.txt | wc -l | xargs`
included_channels="[1:$num_channels]"    # PY12N008: "[1:4 7:89]". Convert the data to not require defining these gaps.
# TODO: These sizes are the results of date_converter in time_filter.
sizes="[300000]" # PY12N008: "[640000, 672000, 737000, 729000]"
eeg2fsv_out=$PROJECT_HOME/output/eeg/$patient_id/adj_pwr
patient_file_path="$HOME/dev/eztrack/tools/output/eeg/$patient_id/"

rm -rf $eeg2fsv_out
cd $PROJECT_HOME/eeg2fsv && \
    $matlab_jvm "eeg2fsv('$patient_file_path', '$patient_id', $num_channels, $included_channels, $sizes); exit"

# Copy results to output dir used in fsv2heatmap computation.
cp $eeg2fsv_out/svd_vectors/fsv_pwr$patient_id.mat $PROJECT_HOME/output/fsv

printf "\n== fsv2heatmap ==\n"
cd $PROJECT_HOME/fsv2heatmap && \
    $matlab_jvm "csv_file = temporal_ieeg_results('$patient_id'); display(csv_file); exit" > $temporal_out

# TODO: Have fsv2heatmap save this output path to a different file to avoid relying on position with tail.
results=`tail -n 3 $temporal_out | head -n 1`
echo $results > /tmp/eztrack.out

printf "\nEZTrack is finished processing $patient_id. Results saved to:\n$results\nThis path is also in /tmp/eztrack.out"
