#!/usr/bin/env bash

PROJECT_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

patient_id=$1
[[ ! -z "$patient_id" ]] || { echo "Usage: $0 <patient_id (e.g. PY12N008)>" ; exit 1 ; }

set -eu

matlab_jvm="matlab -nodesktop -nosplash -r"
[[ ! -z "`which matlab`" ]] || \
    { echo "MATLAB not found on the PATH; please check the Getting Started section in the README" ; exit 1 ; }

####### Input parameter validation #######

# Force GNU date syntax via coreutils on OS X
date=date
if [[ $OSTYPE == darwin* ]]; then
  date=gdate
fi

offset=60000000  # one minute pre and post-ictal period offset in microseconds
frequency=1000   # number of samples / second in source data

printf "\n== Validating $patient_id.csv  ==\n"
# Events should be marked up by the clinician as follows in, e.g. PY15N012.csv
#
#    patient_id,date,onset_time,offset_time,num_channels,included_channels
#    PY15N012,2015-08-17,16:16:57,16:21:57,48,[1:48]

# Read the csv: Assume only one entry for now, though we could process all to find all segments, start, and end marks.
IFS=',' read -r -a inputs <<< "$(head -n 2 $PROJECT_HOME/data/patients/$patient_id.csv | tail -n 1)"

dt="${inputs[1]}"
recording_start="${inputs[2]}"
s_onset="${inputs[3]}"
s_offset="${inputs[4]}"
recording_duration="${inputs[5]}"
num_channels="${inputs[6]}"
included_channels="${inputs[7]}"

# Convert dates to uUTC:
recording_start_time=$(TZ=America/New_York $date --date="$dt $recording_start" +%s%6N)
seizure_onset_time=$(TZ=America/New_York $date --date="$dt $s_onset" +%s%6N)
seizure_offset_time=$(TZ=America/New_York $date --date="$dt $s_offset" +%s%6N)

printf "recording_start_time\t${recording_start_time}\n"
printf "seizure_onset_time\t${seizure_onset_time}\n"
printf "seizure_offset_time\t${seizure_offset_time}\n\n"

start_mark=$(( (seizure_onset_time - recording_start_time) / 1000000 ))
echo "start mark must be greater than 60:"
printf "\tstart_mark:\t$start_mark\n"

# TODO: Review whether or not to give the end mark offset a 1s wider margin to avoid 'Matrix dimensions must agree' errors.
end_mark=$(( (seizure_offset_time - recording_start_time) / 1000000 ))
echo "end_mark must be at least 60s less than the duration of the file."
printf "\tend_mark:\t$end_mark\n"
printf "\trecording_duration:\t$recording_duration\n"
number_of_samples=$(( recording_duration * frequency ))
printf "\tnumber_of_samples:\t$number_of_samples\n"

###### End of input parameter validation #######

# TODO: Read this from output of above.
sizes="[$number_of_samples]"  # number of samples in each file. For PY12N008: "[640000, 672000, 737000, 729000] corresponding to 640s, 672s, etc. at 1kHz"

eeg_output=$PROJECT_HOME/output/eeg/$patient_id

eeg2fsv_out=$eeg_output/adj_pwr

temporal_out=/tmp/eztrack-temporal

printf "\n== eeg2fsv ==\n"
rm -rf $eeg2fsv_out
cd $PROJECT_HOME/eeg2fsv && \
   echo "Invoking matlab with eeg2fsv('$eeg_output', '$patient_id', $num_channels, $included_channels, $sizes)" && \
   $matlab_jvm "eeg2fsv('${eeg_output}/', '$patient_id', $num_channels, $included_channels, $sizes); exit"

# Copy results to output dir used in fsv2heatmap computation.
cp $eeg2fsv_out/svd_vectors/fsv_pwr$patient_id.mat $PROJECT_HOME/output/fsv

# Copy the list of labels extracted from the EDF files to a backup.
cp $eeg_output/${patient_id}_labels.csv $eeg_output/${patient_id}_all_labels.csv

# Copy the list of labels that will actually be used in the analysis.
cp $PROJECT_HOME/data/patients/${patient_id}_channels.csv $eeg_output/${patient_id}_labels.csv

printf "\n== fsv2heatmap ==\n"
cd $PROJECT_HOME/fsv2heatmap && \
    $matlab_jvm "csv_file = temporal_ieeg_results('$PROJECT_HOME', '$patient_id', '${patient_id}_labels.csv', $start_mark, $end_mark); display(csv_file); exit" > $temporal_out

# HACK: Have fsv2heatmap save this output path to a different file to avoid relying on position with tail.
results=`tail -n 3 $temporal_out | head -n 1`
echo $results > /tmp/eztrack.out

printf "\nEZTrack is finished processing $patient_id. Results saved to:\n$results\nThis path is also in /tmp/eztrack.out\n"
